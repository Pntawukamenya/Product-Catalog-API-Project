openapi: 3.0.0
info:
  title: Product Catalog API
  version: 1.0.0
  description: RESTful API for managing a product catalog (products, categories, inventory, variants, discounts).
servers:
  - url: http://localhost:5000
    description: Local server
paths:
  /api/categories:
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
    get:
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /api/categories/{id}:
    get:
      summary: Get a category by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Category ID
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      summary: Update a category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    delete:
      summary: Delete a category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Category ID
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Category not found
  /api/products:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Validation error
    get:
      summary: Get all products (with search/filter)
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter by product name
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: lowStock
          schema:
            type: number
          description: Inventory less than or equal to this value
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /api/products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update a product
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
  /api/products/report/low-stock:
    get:
      summary: Get products with low inventory
      parameters:
        - in: query
          name: threshold
          schema:
            type: number
          description: Inventory less than or equal to this value (default 5)
      responses:
        '200':
          description: List of low-stock products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
components:
  schemas:
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CategoryInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        price:
          type: number
        discount:
          type: number
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        inventory:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
        discount:
          type: number
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        inventory:
          type: number
      required:
        - name
        - category
        - price
    Variant:
      type: object
      properties:
        size:
          type: string
        color:
          type: string
        price:
          type: number
        inventory:
          type: number
